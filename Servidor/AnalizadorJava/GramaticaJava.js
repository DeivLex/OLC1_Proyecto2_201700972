/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,7],$V2=[1,6],$V3=[5,9,12],$V4=[1,21],$V5=[2,12],$V6=[1,19],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,31],$Vd=[1,35],$Ve=[11,29],$Vf=[2,23],$Vg=[1,39],$Vh=[1,47],$Vi=[1,46],$Vj=[1,44],$Vk=[1,45],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,58],$Vu=[10,15,25,26,37,39,45,46,47,48,49,50,51,52,63,65,67,69,72,74,78,85,87,90,92,94,99,100,101,102,103],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[11,20,24,31,32,33,34,35,36,38,39,40,41,42,43,44,88],$VJ=[2,42],$VK=[1,83],$VL=[2,51],$VM=[11,20,24,88],$VN=[1,125],$VO=[2,133],$VP=[1,127],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,122],$VU=[1,121],$VV=[1,123],$VW=[1,124],$VX=[1,126],$VY=[1,128],$VZ=[20,99,100,101,102,103],$V_=[11,20,24,31,32,33,34,35,36,38,39,40,41,42,43,44,59,60,88],$V$=[2,130],$V01=[10,15,25,26,37,39,45,46,47,48,49,50,51,52,63,65,67,69,72,74,78,85,92,99,100,101,102,103],$V11=[1,144],$V21=[15,87,90],$V31=[1,164],$V41=[1,162],$V51=[1,161],$V61=[1,165],$V71=[1,160],$V81=[1,159],$V91=[1,158],$Va1=[1,169],$Vb1=[2,137],$Vc1=[1,174],$Vd1=[1,183],$Ve1=[1,184],$Vf1=[11,20,59,60],$Vg1=[1,186],$Vh1=[1,187],$Vi1=[1,188],$Vj1=[1,189],$Vk1=[1,190],$Vl1=[11,20,31,32,33,34,35,36,38,39,40,41,42,59,60],$Vm1=[10,37,45,46,47,51,52],$Vn1=[10,37,45,46,47],$Vo1=[11,20,31,32,33,34,35,36,59,60],$Vp1=[10,15,25,26,37,39,45,46,47,48,49,50,51,52,63,69,72,74,78,85,87,90,92,94,99,100,101,102,103],$Vq1=[1,233],$Vr1=[1,234];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"EXP":4,"EOF":5,"IMPORTS":6,"CLASS":7,"IMPORT":8,"tk_IMP":9,"id":10,"punto_coma":11,"tk_CLASS":12,"llave_izq":13,"CUERPO_CLASS":14,"llave_der":15,"FUN_DE":16,"ASIGNACION":17,"MAIN":18,"FIN_FUN":19,"parentesis_der":20,"BFUN":21,"LIST_PARAM":22,"TIPO":23,"tk_coma":24,"tk_VOID":25,"parentesis_izq":26,"LISTA_ID":27,"FIN_DE":28,"tk_igual":29,"EXPRESION":30,"tk_mayor":31,"tk_menor":32,"tk_menorig":33,"tk_mayorig":34,"tk_igualdad":35,"tk_dist":36,"tk_not":37,"tk_sum":38,"tk_res":39,"tk_mul":40,"tk_div":41,"tk_pot":42,"tk_incr":43,"tk_decr":44,"tk_NULL":45,"cadena":46,"entero":47,"decimal":48,"char":49,"boolean":50,"tk_TRUE":51,"tk_FALSE":52,"CALL_FUNCT":53,"LISTA_EXP":54,"CONDICION":55,"OPERADOR":56,"NUMEROS":57,"OPERADORLOG":58,"tk_and":59,"tk_or":60,"TERMINAL":61,"RETURN":62,"tk_RETURN":63,"IF_ELSE":64,"tk_IF":65,"BLOQUE":66,"tk_ELSE":67,"WHILE":68,"tk_WHILE":69,"CICLOS":70,"DO":71,"tk_DO":72,"FOR":73,"tk_FOR":74,"DEC_ASIG":75,"INC_DEC":76,"PRINT":77,"tk_SYSTEM":78,"tk_punto":79,"tk_out":80,"tk_PRINTLN":81,"tk_PRINT":82,"tk_MAIN":83,"SWITCH":84,"tk_SW":85,"CASES":86,"tk_CASE":87,"tk_dpunt":88,"BCASOS":89,"tk_DEFA":90,"BREAK":91,"tk_BRAKE":92,"CONTINUE":93,"tk_CONTINUE":94,"BLOQUEC":95,"BM":96,"SENTENCIAS":97,"SENTENCIA":98,"tk_INT":99,"tk_DOUBLE":100,"tk_BOOL":101,"tk_CHAR":102,"tk_STRING":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_IMP",10:"id",11:"punto_coma",12:"tk_CLASS",13:"llave_izq",15:"llave_der",20:"parentesis_der",24:"tk_coma",25:"tk_VOID",26:"parentesis_izq",29:"tk_igual",31:"tk_mayor",32:"tk_menor",33:"tk_menorig",34:"tk_mayorig",35:"tk_igualdad",36:"tk_dist",37:"tk_not",38:"tk_sum",39:"tk_res",40:"tk_mul",41:"tk_div",42:"tk_pot",43:"tk_incr",44:"tk_decr",45:"tk_NULL",46:"cadena",47:"entero",48:"decimal",49:"char",50:"boolean",51:"tk_TRUE",52:"tk_FALSE",59:"tk_and",60:"tk_or",63:"tk_RETURN",65:"tk_IF",67:"tk_ELSE",69:"tk_WHILE",72:"tk_DO",74:"tk_FOR",78:"tk_SYSTEM",79:"tk_punto",80:"tk_out",81:"tk_PRINTLN",82:"tk_PRINT",83:"tk_MAIN",85:"tk_SW",87:"tk_CASE",88:"tk_dpunt",90:"tk_DEFA",92:"tk_BRAKE",94:"tk_CONTINUE",99:"tk_INT",100:"tk_DOUBLE",101:"tk_BOOL",102:"tk_CHAR",103:"tk_STRING"},
productions_: [0,[3,2],[4,2],[4,1],[4,0],[6,2],[6,1],[8,3],[7,5],[14,2],[14,2],[14,2],[14,0],[19,4],[19,2],[22,4],[22,2],[16,4],[16,4],[16,3],[28,1],[28,3],[27,3],[27,1],[17,4],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,3],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[53,4],[53,3],[54,3],[54,1],[55,3],[55,3],[55,1],[55,1],[55,1],[56,1],[56,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[57,1],[57,2],[57,1],[57,1],[57,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[62,3],[64,5],[64,6],[64,6],[64,7],[64,2],[68,7],[71,9],[73,10],[75,1],[75,1],[76,2],[76,2],[76,2],[76,2],[77,9],[77,9],[18,7],[84,7],[86,5],[86,3],[91,2],[93,2],[95,3],[96,2],[96,0],[66,2],[97,2],[97,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[98,1],[98,1],[98,2],[98,1],[98,1],[98,1],[89,2],[89,1],[89,1],[89,0],[21,2],[21,1],[21,0],[70,2],[70,1],[70,1],[70,0],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return "Todo bien: "+lista_token; 
break;
case 2: case 5: case 20:
 
break;
case 22:
 lista_token.push($$[$0-2]); 
break;
case 23:
lista_token.push(yytext);
break;
case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 39: case 40: case 41: case 54: case 55: case 58: case 59: case 69: case 70: case 71: case 72: case 73: case 138: case 139: case 140: case 141: case 142:
   
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:$V1,12:$V2},{1:[3]},{5:[1,8]},{4:9,5:$V0,6:3,7:4,8:5,9:$V1,12:$V2},{5:[2,3]},o([5,12],[2,6],{8:5,6:10,9:$V1}),{10:[1,11]},{10:[1,12]},{1:[2,1]},{5:[2,2]},o($V3,[2,5]),{13:[1,13]},{11:[1,14]},{10:$V4,14:15,15:$V5,16:16,17:17,18:18,23:20,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($V3,[2,7]),{15:[1,27]},{10:$V4,14:28,15:$V5,16:16,17:17,18:18,23:20,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V4,14:29,15:$V5,16:16,17:17,18:18,23:20,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V4,14:30,15:$V5,16:16,17:17,18:18,23:20,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$Vc,83:[1,32]},{10:[1,33],27:34},{29:$Vd},{10:[2,138]},{10:[2,139]},{10:[2,140]},{10:[2,141]},{10:[2,142]},{5:[2,8]},{15:[2,9]},{15:[2,10]},{15:[2,11]},{26:[1,36]},{26:[1,37]},o($Ve,$Vf,{24:$Vg,26:[1,38]}),{11:[1,41],28:40,29:[1,42]},{10:$Vh,26:$Vi,30:43,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{19:57,20:$Vt,22:59,23:60,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{20:[1,61]},{19:62,20:$Vt,22:59,23:60,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:[1,64],27:63},o($Vu,[2,19]),o($Vu,[2,20]),{10:$Vh,26:$Vi,30:65,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{11:[1,66],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},{10:$Vh,26:$Vi,30:80,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:81,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:82,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},o($VI,$VJ,{26:$VK}),o($VI,[2,43]),o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46]),o($VI,[2,47]),o($VI,[2,48]),o($VI,[2,49]),o($VI,[2,50]),o($VI,$VL),o($Vu,[2,17]),{13:[1,84]},{19:85,20:$Vt,22:59,23:60,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:[1,86]},{13:[1,87]},o($Vu,[2,18]),o($Ve,[2,22]),o($Ve,$Vf,{24:$Vg}),{11:[1,88],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},o($Vu,[2,24]),{10:$Vh,26:$Vi,30:89,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:90,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:91,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:92,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:93,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:94,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:95,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:96,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:97,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:98,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:99,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},o($VI,[2,37]),o($VI,[2,38]),o($VM,[2,31],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,39],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),{20:[1,100],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},{10:$Vh,20:[1,102],26:$Vi,30:103,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56,54:101},{10:$VN,15:$VO,16:116,17:114,21:104,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:106,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:117,92:$VY,98:105,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vu,[2,14]),o($VZ,[2,16],{24:[1,129]}),{10:$VN,15:$VO,16:116,17:114,21:130,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:106,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:117,92:$VY,98:105,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vu,[2,21]),o($VM,[2,25],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,26],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,27],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,28],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,29],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,30],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,32],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,33],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,34],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,35],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VM,[2,36],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VI,[2,40]),{20:[1,131]},o($V_,[2,53]),{20:[2,55],24:[1,132],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},{15:[1,133]},{10:$VN,15:$V$,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,89:134,91:136,92:$VY,98:135,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($V01,[2,132]),o($Vu,[2,115]),o($Vu,[2,116]),o($Vu,[2,117]),o($Vu,[2,118]),o($Vu,[2,119]),o([31,32,33,34,35,36,38,39,40,41,42,43,44],$VL,{11:[1,138]}),o($Vu,[2,121]),o($Vu,[2,122]),{11:[1,139],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},o($Vu,[2,124]),o($V01,[2,125]),{10:$Vh,26:$Vi,30:140,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{26:[1,141]},{13:$V11,65:[1,142],66:143},{13:[1,145]},{26:[1,146]},{26:[1,147]},{79:[1,148]},o([11,31,32,33,34,35,36,38,39,40,41,42,43,44],$VJ,{26:$VK,29:$Vd}),{26:[1,149]},{10:$Vc},{11:[1,150]},{22:151,23:60,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{15:[1,152]},o($V_,[2,52]),{10:$Vh,26:$Vi,30:103,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56,54:153},o($Vu,[2,13]),{15:[2,131]},o($V21,[2,128],{23:20,64:107,71:108,68:109,73:110,77:111,53:112,84:113,17:114,30:115,16:116,98:135,91:136,62:137,89:154,10:$VN,25:$VP,26:$Vi,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,63:$VQ,65:$VR,67:$VS,69:$VT,72:$VU,74:$VV,78:$VW,85:$VX,92:$VY,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb}),o([10,15,25,26,37,39,45,46,47,48,49,50,51,52,63,65,67,69,72,74,78,85,87,90,92,99,100,101,102,103],[2,129]),o($Vu,[2,126]),o($Vu,[2,120]),o($Vu,[2,123]),{11:[1,155],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,51:$V81,52:$V91,53:163,55:156,57:157},{26:[1,166]},o($Vu,[2,91]),{10:$VN,15:$Va1,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:117,92:$VY,97:167,98:168,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$VN,15:$Vb1,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,70:170,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:172,92:$VY,93:173,94:$Vc1,98:171,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,51:$V81,52:$V91,53:163,55:175,57:157},{10:$V4,16:178,17:177,23:20,25:$VP,75:176,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{80:[1,179]},{10:$Vh,26:$Vi,30:180,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},o($Vu,[2,107]),o($VZ,[2,15]),o([10,15,25,99,100,101,102,103],[2,103]),{20:[2,54]},o($V21,[2,127]),o($Vu,[2,86]),{20:[1,181],56:182,59:$Vd1,60:$Ve1},o($Vf1,[2,60],{58:185,31:[1,191],32:[1,192],33:[1,193],34:[1,194],35:[1,195],36:[1,196],38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),o($Vf1,[2,58]),o($Vf1,[2,59]),o($Vl1,[2,74]),o($Vl1,[2,75]),{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:197},o($Vl1,[2,77]),o($Vl1,[2,78],{26:$VK}),o($Vl1,[2,79]),{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,51:$V81,52:$V91,53:163,55:198,57:157},o($Vu,[2,112]),{10:$VN,15:$Va1,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:117,92:$VY,97:199,98:168,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vu,[2,114]),{15:[1,200]},{10:$VN,15:$Vb1,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,70:201,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:172,92:$VY,93:173,94:$Vc1,98:171,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o([10,15,25,26,37,39,45,46,47,48,49,50,51,52,63,65,67,69,72,74,78,85,92,94,99,100,101,102,103],[2,135]),{15:[2,136]},{11:[1,202]},{20:[1,203],56:182,59:$Vd1,60:$Ve1},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,51:$V81,52:$V91,53:163,55:204,57:157},o($Vm1,[2,95]),o($Vm1,[2,96]),{79:[1,205]},{20:[1,206],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},{13:$V11,66:207},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,51:$V81,52:$V91,53:163,55:208,57:157},o($Vm1,[2,61]),o($Vm1,[2,62]),{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:209},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:210},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:211},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:212},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:213},{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,53:163,57:214},o($Vn1,[2,63]),o($Vn1,[2,64]),o($Vn1,[2,65]),o($Vn1,[2,66]),o($Vn1,[2,67]),o($Vn1,[2,68]),o($Vo1,[2,76],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),{20:[1,215],56:182,59:$Vd1,60:$Ve1},o($Vu,[2,113]),{69:[1,216]},{15:[2,134]},{15:[2,108]},{13:[1,217]},{11:[1,218],56:182,59:$Vd1,60:$Ve1},{81:[1,219],82:[1,220]},{13:[1,221]},o($Vp1,[2,87],{64:222,65:$VR,67:$VS}),o([11,20],[2,56],{56:182,59:$Vd1,60:$Ve1}),o($Vf1,[2,57],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),o($Vo1,[2,69],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),o($Vo1,[2,70],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),o($Vo1,[2,71],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),o($Vo1,[2,72],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),o($Vo1,[2,73],{38:$Vg1,39:$Vh1,40:$Vi1,41:$Vj1,42:$Vk1}),{13:$V11,66:223},{26:[1,224]},{10:$VN,15:$Vb1,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,70:225,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:172,92:$VY,93:173,94:$Vc1,98:171,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:[1,227],43:[1,228],44:[1,229],76:226},{26:[1,230]},{26:[1,231]},{86:232,87:$Vq1,90:$Vr1},o($Vu,[2,88]),o($Vp1,[2,89],{64:235,65:$VR,67:$VS}),{10:$V31,37:$V41,45:$V51,46:$V61,47:$V71,51:$V81,52:$V91,53:163,55:236,57:157},{15:[1,237]},{20:[1,238]},{43:[1,240],44:[1,239]},{10:[1,241]},{10:[1,242]},{10:$Vh,26:$Vi,30:243,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{10:$Vh,26:$Vi,30:244,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{15:[1,245]},{10:$Vh,26:$Vi,30:246,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:56},{88:[1,247]},o($Vu,[2,90]),{20:[1,248],56:182,59:$Vd1,60:$Ve1},o($Vu,[2,92]),{13:[1,249]},{20:[2,97]},{20:[2,98]},{20:[2,99]},{20:[2,100]},{20:[1,250],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},{20:[1,251],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH},o($Vu,[2,104]),{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,88:[1,252]},{10:$VN,15:$V$,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,89:253,91:136,92:$VY,98:135,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{11:[1,254]},{10:$VN,15:$Vb1,16:116,17:114,23:20,25:$VP,26:$Vi,30:115,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:112,62:137,63:$VQ,64:107,65:$VR,67:$VS,68:109,69:$VT,70:255,71:108,72:$VU,73:110,74:$VV,77:111,78:$VW,84:113,85:$VX,91:172,92:$VY,93:173,94:$Vc1,98:171,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{11:[1,256]},{11:[1,257]},o([87,90],$V$,{23:20,64:107,71:108,68:109,73:110,77:111,53:112,84:113,17:114,30:115,16:116,98:135,91:136,62:137,89:258,10:$VN,25:$VP,26:$Vi,37:$Vj,39:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,63:$VQ,65:$VR,67:$VS,69:$VT,72:$VU,74:$VV,78:$VW,85:$VX,92:$VY,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb}),{15:[2,106]},o($Vu,[2,93]),{15:[1,259]},o($Vu,[2,101]),o($Vu,[2,102]),{86:260,87:$Vq1,90:$Vr1},o($Vu,[2,94]),{15:[2,105]}],
defaultActions: {4:[2,3],8:[2,1],9:[2,2],22:[2,138],23:[2,139],24:[2,140],25:[2,141],26:[2,142],27:[2,8],28:[2,9],29:[2,10],30:[2,11],134:[2,131],153:[2,54],173:[2,136],201:[2,134],202:[2,108],239:[2,97],240:[2,98],241:[2,99],242:[2,100],253:[2,106],260:[2,105]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //let CErrores=require('../JavaAST/Errores');
    var lista_token = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:  return 46; 
break;
case 4:return 43
break;
case 5:return 44
break;
case 6:return 35
break;
case 7:return 36
break;
case 8:return 34
break;
case 9:return 33 
break;
case 10:return 31
break;
case 11:return 32
break;
case 12:return 40
break;
case 13:return 41
break;
case 14:return 39
break;
case 15:return 38
break;
case 16:return 26
break;
case 17:return 20
break;
case 18:return 13
break;
case 19:return 15
break;
case 20:return 59
break;
case 21:return 60
break;
case 22:return 37
break;
case 23:return 11
break;
case 24:return 24
break;
case 25:return 88
break;
case 26:return 29
break;
case 27:return 42
break;
case 28:return 'tk_mod' 
break;
case 29:return 79
break;
case 30:return 99
break;
case 31:return 100
break;
case 32:return 103
break;
case 33:return 102
break;
case 34:return 101
break;
case 35:return 51
break;
case 36:return 52
break;
case 37:return 69
break;
case 38:return 65
break;
case 39:return 67
break;
case 40:return 74
break;
case 41:return 25
break;
case 42:return 87
break;
case 43:return 85
break;
case 44:return 90
break;
case 45:return 92
break;
case 46:return 72
break;
case 47:return 9
break;
case 48:return 63
break;
case 49:return 83
break;
case 50:return 78
break;
case 51:return 80
break;
case 52:return 81
break;
case 53:return 82
break;
case 54:return 45
break;
case 55:return 12
break;
case 56:return 94
break;
case 57: /*se ignoran*/ 
break;
case 58:  return 48;  
break;
case 59:  return 47;  
break;
case 60:  return 10 ;   
break;
case 61:  return 49;   
break;
case 62: /*se ignoran*/ 
break;
case 63:  return 5;   
break;
case 64:console.log("Error lexico:",yy_.yytext,"Linea:",yy_.yylineno);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:"[^\"]*")/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:import\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:null\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:[\t\r\n\f])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[A-Za-z"_"]+["_"0-9A-Za-z]*)/,/^(?:[\'][^\'\n][\'])/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}