/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[2,4],$V2=[1,7],$V3=[1,6],$V4=[2,5,9,12],$V5=[1,24],$V6=[1,23],$V7=[2,13],$V8=[1,21],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,34],$Vf=[1,38],$Vg=[2,10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,87,90,92,94,99,100,101,102,103],$Vh=[2,11,29],$Vi=[2,25],$Vj=[1,42],$Vk=[1,51],$Vl=[1,50],$Vm=[1,48],$Vn=[1,49],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,62],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[11,20,24,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,88],$VN=[2,47],$VO=[1,89],$VP=[2,56],$VQ=[11,20,24,88],$VR=[1,133],$VS=[2,141],$VT=[1,135],$VU=[1,126],$VV=[1,127],$VW=[1,128],$VX=[1,130],$VY=[1,129],$VZ=[1,131],$V_=[1,132],$V$=[1,134],$V01=[1,136],$V11=[20,99,100,101,102,103],$V21=[2,138],$V31=[2,10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,92,99,100,101,102,103],$V41=[1,152],$V51=[15,87,90],$V61=[1,173],$V71=[1,166],$V81=[1,171],$V91=[1,170],$Va1=[1,174],$Vb1=[1,169],$Vc1=[1,168],$Vd1=[1,167],$Ve1=[1,178],$Vf1=[2,145],$Vg1=[1,183],$Vh1=[1,194],$Vi1=[1,192],$Vj1=[1,193],$Vk1=[2,66],$Vl1=[1,201],$Vm1=[1,202],$Vn1=[1,203],$Vo1=[1,204],$Vp1=[1,205],$Vq1=[1,206],$Vr1=[1,196],$Vs1=[1,197],$Vt1=[1,198],$Vu1=[1,199],$Vv1=[1,200],$Vw1=[11,20,35,37,38],$Vx1=[11,20,31,32,33,34,35,36,37,38,40,41,42,43,44],$Vy1=[1,210],$Vz1=[10,26,39,47,48,49,53,54],$VA1=[10,26,39,47,48,49],$VB1=[1,229],$VC1=[11,20,31,32,33,34,35,36,37,38],$VD1=[2,10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,69,72,74,78,85,87,90,92,94,99,100,101,102,103],$VE1=[1,249],$VF1=[1,250];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"EXP":4,"EOF":5,"IMPORTS":6,"CLASS":7,"IMPORT":8,"tk_IMP":9,"id":10,"punto_coma":11,"tk_CLASS":12,"llave_izq":13,"CUERPO_CLASS":14,"llave_der":15,"FUN_DE":16,"ASIGNACION":17,"MAIN":18,"FIN_FUN":19,"parentesis_der":20,"BFUN":21,"LIST_PARAM":22,"TIPO":23,"tk_coma":24,"tk_VOID":25,"parentesis_izq":26,"LISTA_ID":27,"FIN_DE":28,"tk_igual":29,"EXPRESION":30,"tk_mayor":31,"tk_menor":32,"tk_menorig":33,"tk_mayorig":34,"tk_igualdad":35,"tk_dist":36,"tk_and":37,"tk_or":38,"tk_not":39,"tk_sum":40,"tk_res":41,"tk_mul":42,"tk_div":43,"tk_pot":44,"tk_incr":45,"tk_decr":46,"tk_NULL":47,"cadena":48,"entero":49,"decimal":50,"char":51,"boolean":52,"tk_TRUE":53,"tk_FALSE":54,"CALL_FUNCT":55,"LISTA_EXP":56,"CONDICION":57,"OPERADOR":58,"NUMEROS":59,"OPERADORLOG":60,"TERMINAL":61,"RETURN":62,"tk_RETURN":63,"IF_ELSE":64,"tk_IF":65,"BLOQUE":66,"tk_ELSE":67,"WHILE":68,"tk_WHILE":69,"CICLOS":70,"DO":71,"tk_DO":72,"FOR":73,"tk_FOR":74,"DEC_ASIG":75,"INC_DEC":76,"PRINT":77,"tk_SYSTEM":78,"tk_punto":79,"tk_out":80,"tk_PRINTLN":81,"tk_PRINT":82,"tk_MAIN":83,"SWITCH":84,"tk_SW":85,"CASES":86,"tk_CASE":87,"tk_dpunt":88,"BCASOS":89,"tk_DEFA":90,"BREAK":91,"tk_BRAKE":92,"CONTINUE":93,"tk_CONTINUE":94,"BLOQUEC":95,"BM":96,"SENTENCIAS":97,"SENTENCIA":98,"tk_INT":99,"tk_DOUBLE":100,"tk_BOOL":101,"tk_CHAR":102,"tk_STRING":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_IMP",10:"id",11:"punto_coma",12:"tk_CLASS",13:"llave_izq",15:"llave_der",20:"parentesis_der",24:"tk_coma",25:"tk_VOID",26:"parentesis_izq",29:"tk_igual",31:"tk_mayor",32:"tk_menor",33:"tk_menorig",34:"tk_mayorig",35:"tk_igualdad",36:"tk_dist",37:"tk_and",38:"tk_or",39:"tk_not",40:"tk_sum",41:"tk_res",42:"tk_mul",43:"tk_div",44:"tk_pot",45:"tk_incr",46:"tk_decr",47:"tk_NULL",48:"cadena",49:"entero",50:"decimal",51:"char",52:"boolean",53:"tk_TRUE",54:"tk_FALSE",63:"tk_RETURN",65:"tk_IF",67:"tk_ELSE",69:"tk_WHILE",72:"tk_DO",74:"tk_FOR",78:"tk_SYSTEM",79:"tk_punto",80:"tk_out",81:"tk_PRINTLN",82:"tk_PRINT",83:"tk_MAIN",85:"tk_SW",87:"tk_CASE",88:"tk_dpunt",90:"tk_DEFA",92:"tk_BRAKE",94:"tk_CONTINUE",99:"tk_INT",100:"tk_DOUBLE",101:"tk_BOOL",102:"tk_CHAR",103:"tk_STRING"},
productions_: [0,[3,2],[4,2],[4,2],[4,0],[6,2],[6,1],[8,3],[8,1],[7,5],[14,2],[14,2],[14,2],[14,0],[19,4],[19,2],[22,4],[22,2],[16,4],[16,4],[16,3],[28,1],[28,3],[28,1],[27,3],[27,1],[17,4],[17,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,3],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[55,4],[55,3],[56,3],[56,1],[57,3],[57,3],[57,3],[57,1],[57,1],[57,1],[58,1],[58,1],[58,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,1],[59,1],[59,2],[59,1],[59,1],[59,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[62,3],[64,5],[64,6],[64,6],[64,7],[64,2],[68,7],[71,9],[73,10],[75,1],[75,1],[76,2],[76,2],[76,2],[76,2],[77,9],[77,9],[18,7],[84,7],[86,5],[86,3],[91,2],[93,2],[95,3],[96,2],[96,0],[66,2],[97,2],[97,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[98,1],[98,1],[98,2],[98,1],[98,1],[98,1],[89,2],[89,1],[89,1],[89,0],[21,2],[21,1],[21,0],[70,2],[70,1],[70,1],[70,0],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return lista_token; 
break;
case 2: case 5: case 21:
 
break;
case 8: case 23: case 27:
CErrores.Errores.add(new CNodoError.NodoError("Sintactico","No se esperaba el caracter: "+yytext,yylineno));
break;
case 9:
 lista_token.unshift("class-"+$$[$0-3]); 
break;
case 18:
lista_token.unshift("funcion-"+$$[$0-2]);
break;
case 19:
 lista_token.unshift("funcion-"+$$[$0-2]); 
break;
case 20:
 tipo_var = $$[$0-2]; lista_token.unshift(tipo_var+"-"+list_var); list_var=""; 
break;
case 24:
 list_var+="."+$$[$0-2]; 
break;
case 25:
 list_var+= $$[$0]; 
break;
case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 44: case 45: case 46: case 59: case 60: case 64: case 65: case 77: case 78: case 79: case 80: case 81: case 146: case 147: case 148: case 149: case 150:
   
break;
case 111:
lista_token.unshift("funcion-main");
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,8:5,9:$V2,12:$V3},{1:[3]},{5:[1,9]},{2:$V0,4:10,5:$V1,6:3,7:4,8:5,9:$V2,12:$V3},{2:$V0,4:11,5:$V1,6:3,7:4,8:5,9:$V2,12:$V3},o([5,12],[2,6],{8:5,6:12,2:$V0,9:$V2}),{10:[1,13]},{10:[1,14]},o($V4,[2,8]),{1:[2,1]},{5:[2,2]},{5:[2,3]},o($V4,[2,5]),{13:[1,15]},{11:[1,16]},{2:$V5,10:$V6,14:17,15:$V7,16:18,17:19,18:20,23:22,25:$V8,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},o($V4,[2,7]),{15:[1,30]},{2:$V5,10:$V6,14:31,15:$V7,16:18,17:19,18:20,23:22,25:$V8,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{2:$V5,10:$V6,14:32,15:$V7,16:18,17:19,18:20,23:22,25:$V8,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{2:$V5,10:$V6,14:33,15:$V7,16:18,17:19,18:20,23:22,25:$V8,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{10:$Ve,83:[1,35]},{10:[1,36],27:37},{29:$Vf},o($Vg,[2,27]),{10:[2,146]},{10:[2,147]},{10:[2,148]},{10:[2,149]},{10:[2,150]},o($V4,[2,9]),{15:[2,10]},{15:[2,11]},{15:[2,12]},{26:[1,39]},{26:[1,40]},o($Vh,$Vi,{24:$Vj,26:[1,41]}),{2:[1,46],11:[1,44],28:43,29:[1,45]},{10:$Vk,26:$Vl,30:47,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{19:61,20:$Vw,22:63,23:64,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{20:[1,65]},{19:66,20:$Vw,22:63,23:64,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{10:[1,68],27:67},o($Vg,[2,20]),o($Vg,[2,21]),{10:$Vk,26:$Vl,30:69,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},o($Vg,[2,23]),{11:[1,70],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},{10:$Vk,26:$Vl,30:86,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:87,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:88,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},o($VM,$VN,{26:$VO}),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,50]),o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,53]),o($VM,[2,54]),o($VM,[2,55]),o($VM,$VP),o($Vg,[2,18]),{13:[1,90]},{19:91,20:$Vw,22:63,23:64,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{10:[1,92]},{13:[1,93]},o($Vg,[2,19]),o($Vh,[2,24]),o($Vh,$Vi,{24:$Vj}),{11:[1,94],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},o($Vg,[2,26]),{10:$Vk,26:$Vl,30:95,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:96,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:97,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:98,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:99,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:100,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:101,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:102,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:103,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:104,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:105,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:106,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:107,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},o($VM,[2,42]),o($VM,[2,43]),o($VQ,[2,36],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,44],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),{20:[1,108],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},{10:$Vk,20:[1,110],26:$Vl,30:111,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60,56:109},{2:$V5,10:$VR,15:$VS,16:124,17:122,21:112,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:114,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:125,92:$V01,98:113,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},o($Vg,[2,15]),o($V11,[2,17],{24:[1,137]}),{2:$V5,10:$VR,15:$VS,16:124,17:122,21:138,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:114,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:125,92:$V01,98:113,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},o($Vg,[2,22]),o($VQ,[2,28],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,29],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,30],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,31],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,32],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,33],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,34],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,35],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,37],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,38],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,39],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,40],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VQ,[2,41],{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL}),o($VM,[2,45]),{20:[1,139]},o($VM,[2,58]),{20:[2,60],24:[1,140],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},{15:[1,141]},{2:$V5,10:$VR,15:$V21,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,89:142,91:144,92:$V01,98:143,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},o($V31,[2,140]),o($Vg,[2,123]),o($Vg,[2,124]),o($Vg,[2,125]),o($Vg,[2,126]),o($Vg,[2,127]),o([31,32,33,34,35,36,37,38,40,41,42,43,44,45,46],$VP,{11:[1,146]}),o($Vg,[2,129]),o($Vg,[2,130]),{11:[1,147],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},o($Vg,[2,132]),o($V31,[2,133]),{10:$Vk,26:$Vl,30:148,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{26:[1,149]},{13:$V41,65:[1,150],66:151},{13:[1,153]},{26:[1,154]},{26:[1,155]},{79:[1,156]},o([11,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46],$VN,{26:$VO,29:$Vf}),{26:[1,157]},{10:$Ve},{11:[1,158]},{22:159,23:64,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{15:[1,160]},o($VM,[2,57]),{10:$Vk,26:$Vl,30:111,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60,56:161},o($Vg,[2,14]),{15:[2,139]},o($V51,[2,136],{23:22,64:115,71:116,68:117,73:118,77:119,55:120,84:121,17:122,30:123,16:124,98:143,91:144,62:145,89:162,2:$V5,10:$VR,25:$VT,26:$Vl,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,63:$VU,65:$VV,67:$VW,69:$VX,72:$VY,74:$VZ,78:$V_,85:$V$,92:$V01,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd}),o([2,10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,87,90,92,99,100,101,102,103],[2,137]),o($Vg,[2,134]),o($Vg,[2,128]),o($Vg,[2,131]),{11:[1,163],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:164,59:165},{26:[1,175]},o($Vg,[2,99]),{2:$V5,10:$VR,15:$Ve1,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:125,92:$V01,97:176,98:177,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{2:$V5,10:$VR,15:$Vf1,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,70:179,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:181,92:$V01,93:182,94:$Vg1,98:180,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:184,59:165},{2:$V5,10:$V6,16:187,17:186,23:22,25:$VT,75:185,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{80:[1,188]},{10:$Vk,26:$Vl,30:189,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},o($Vg,[2,115]),o($V11,[2,16]),o([2,10,15,25,99,100,101,102,103],[2,111]),{20:[2,59]},o($V51,[2,135]),o($Vg,[2,94]),{20:[1,190],35:$Vh1,37:$Vi1,38:$Vj1,58:191},o([11,20,37,38],$Vk1,{60:195,31:$Vl1,32:$Vm1,33:$Vn1,34:$Vo1,35:$Vp1,36:$Vq1,40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:207,59:208},o($Vw1,[2,64]),o($Vw1,[2,65]),o($Vx1,[2,82]),o($Vx1,[2,83]),{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:209},o($Vx1,[2,85]),o($Vx1,[2,86],{26:$VO}),o($Vx1,[2,87]),{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:211,59:165},o($Vg,[2,120]),{2:$V5,10:$VR,15:$Ve1,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:125,92:$V01,97:212,98:177,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},o($Vg,[2,122]),{15:[1,213]},{2:$V5,10:$VR,15:$Vf1,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,70:214,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:181,92:$V01,93:182,94:$Vg1,98:180,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},o([2,10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,92,94,99,100,101,102,103],[2,143]),{15:[2,144]},{11:[1,215]},{20:[1,216],35:$Vh1,37:$Vi1,38:$Vj1,58:191},{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:217,59:165},o($Vz1,[2,103]),o($Vz1,[2,104]),{79:[1,218]},{20:[1,219],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},{13:$V41,66:220},{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:221,59:165},o($Vz1,[2,67]),o($Vz1,[2,68]),o($Vz1,[2,69]),{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:222},{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:223},{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:224},{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:225},{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:226},{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:227},o($VA1,[2,70]),o($VA1,[2,71]),o($VA1,[2,72]),o($VA1,[2,73]),o($VA1,[2,74]),o($VA1,[2,75]),{20:[1,228],35:$Vh1,37:$Vi1,38:$Vj1,58:191},o([37,38],$Vk1,{60:195,20:$VB1,31:$Vl1,32:$Vm1,33:$Vn1,34:$Vo1,35:$Vp1,36:$Vq1,40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($VC1,[2,84],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),{10:$V61,26:$Vy1,39:$V81,47:$V91,48:$Va1,49:$Vb1,55:172,59:230},{20:[1,231],35:$Vh1,37:$Vi1,38:$Vj1,58:191},o($Vg,[2,121]),{69:[1,232]},{15:[2,142]},{15:[2,116]},{13:[1,233]},{11:[1,234],35:$Vh1,37:$Vi1,38:$Vj1,58:191},{81:[1,235],82:[1,236]},{13:[1,237]},o($VD1,[2,95],{64:238,65:$VV,67:$VW}),o([11,20],[2,61],{58:191,35:$Vh1,37:$Vi1,38:$Vj1}),o($Vw1,[2,62],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($VC1,[2,77],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($VC1,[2,78],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($VC1,[2,79],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($VC1,[2,80],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($VC1,[2,81],{40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1}),o($Vw1,[2,63]),o($Vx1,[2,76]),{20:$VB1,40:$Vr1,41:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1},{13:$V41,66:239},{26:[1,240]},{2:$V5,10:$VR,15:$Vf1,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,70:241,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:181,92:$V01,93:182,94:$Vg1,98:180,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{10:[1,243],45:[1,244],46:[1,245],76:242},{26:[1,246]},{26:[1,247]},{86:248,87:$VE1,90:$VF1},o($Vg,[2,96]),o($VD1,[2,97],{64:251,65:$VV,67:$VW}),{10:$V61,26:$V71,39:$V81,47:$V91,48:$Va1,49:$Vb1,53:$Vc1,54:$Vd1,55:172,57:252,59:165},{15:[1,253]},{20:[1,254]},{45:[1,256],46:[1,255]},{10:[1,257]},{10:[1,258]},{10:$Vk,26:$Vl,30:259,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{10:$Vk,26:$Vl,30:260,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{15:[1,261]},{10:$Vk,26:$Vl,30:262,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:60},{88:[1,263]},o($Vg,[2,98]),{20:[1,264],35:$Vh1,37:$Vi1,38:$Vj1,58:191},o($Vg,[2,100]),{13:[1,265]},{20:[2,105]},{20:[2,106]},{20:[2,107]},{20:[2,108]},{20:[1,266],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},{20:[1,267],31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL},o($Vg,[2,112]),{31:$Vx,32:$Vy,33:$Vz,34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,88:[1,268]},{2:$V5,10:$VR,15:$V21,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,89:269,91:144,92:$V01,98:143,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{11:[1,270]},{2:$V5,10:$VR,15:$Vf1,16:124,17:122,23:22,25:$VT,26:$Vl,30:123,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:120,62:145,63:$VU,64:115,65:$VV,67:$VW,68:117,69:$VX,70:271,71:116,72:$VY,73:118,74:$VZ,77:119,78:$V_,84:121,85:$V$,91:181,92:$V01,93:182,94:$Vg1,98:180,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd},{11:[1,272]},{11:[1,273]},o([87,90],$V21,{23:22,64:115,71:116,68:117,73:118,77:119,55:120,84:121,17:122,30:123,16:124,98:143,91:144,62:145,89:274,2:$V5,10:$VR,25:$VT,26:$Vl,39:$Vm,41:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,63:$VU,65:$VV,67:$VW,69:$VX,72:$VY,74:$VZ,78:$V_,85:$V$,92:$V01,99:$V9,100:$Va,101:$Vb,102:$Vc,103:$Vd}),{15:[2,114]},o($Vg,[2,101]),{15:[1,275]},o($Vg,[2,109]),o($Vg,[2,110]),{86:276,87:$VE1,90:$VF1},o($Vg,[2,102]),{15:[2,113]}],
defaultActions: {9:[2,1],10:[2,2],11:[2,3],25:[2,146],26:[2,147],27:[2,148],28:[2,149],29:[2,150],31:[2,10],32:[2,11],33:[2,12],142:[2,139],161:[2,59],182:[2,144],214:[2,142],215:[2,116],255:[2,105],256:[2,106],257:[2,107],258:[2,108],269:[2,114],276:[2,113]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    lista_token = [];
    CErrores.Errores.clear();
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let CErrores=require('../JavaAST/Errores');
    let CNodoError=require('../JavaAST/NodoError');
    var lista_token = [];
    var list_var = "";
    var tipo_var = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:  return 48; 
break;
case 4:return 45
break;
case 5:return 46
break;
case 6:return 35
break;
case 7:return 36
break;
case 8:return 34
break;
case 9:return 33 
break;
case 10:return 31
break;
case 11:return 32
break;
case 12:return 42
break;
case 13:return 43
break;
case 14:return 41
break;
case 15:return 40
break;
case 16:return 26
break;
case 17:return 20
break;
case 18:return 13
break;
case 19:return 15
break;
case 20:return 37
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 11
break;
case 24:return 24
break;
case 25:return 88
break;
case 26:return 29
break;
case 27:return 44
break;
case 28:return 'tk_mod' 
break;
case 29:return 79
break;
case 30:return 99
break;
case 31:return 100
break;
case 32:return 103
break;
case 33:return 102
break;
case 34:return 101
break;
case 35:return 53
break;
case 36:return 54
break;
case 37:return 69
break;
case 38:return 65
break;
case 39:return 67
break;
case 40:return 74
break;
case 41:return 25
break;
case 42:return 87
break;
case 43:return 85
break;
case 44:return 90
break;
case 45:return 92
break;
case 46:return 72
break;
case 47:return 9
break;
case 48:return 63
break;
case 49:return 83
break;
case 50:return 78
break;
case 51:return 80
break;
case 52:return 81
break;
case 53:return 82
break;
case 54:return 47
break;
case 55:return 12
break;
case 56:return 94
break;
case 57: /*se ignoran*/ 
break;
case 58:  return 50;  
break;
case 59:  return 49;  
break;
case 60:  return 10 ;   
break;
case 61:  return 51;   
break;
case 62: /*se ignoran*/ 
break;
case 63:  return 5;  
break;
case 64:CErrores.Errores.add(new CNodoError.NodoError("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno));
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:"[^\"]*")/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:import\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:null\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:[\t\r\n\f])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[A-Za-z"_"]+["_"0-9A-Za-z]*)/,/^(?:[\'][^\'\n][\'])/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}