/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,7],$V2=[1,6],$V3=[5,9,12],$V4=[1,22],$V5=[2,12],$V6=[1,20],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,32],$Vd=[1,36],$Ve=[11,29],$Vf=[2,23],$Vg=[1,40],$Vh=[1,48],$Vi=[1,47],$Vj=[1,45],$Vk=[1,46],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,59],$Vu=[10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,87,90,92,94,99,100,101,102,103],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[11,20,24,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,88],$VL=[2,44],$VM=[1,86],$VN=[2,53],$VO=[11,20,24,88],$VP=[1,130],$VQ=[2,138],$VR=[1,132],$VS=[1,123],$VT=[1,124],$VU=[1,125],$VV=[1,127],$VW=[1,126],$VX=[1,128],$VY=[1,129],$VZ=[1,131],$V_=[1,133],$V$=[20,99,100,101,102,103],$V01=[2,135],$V11=[10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,92,99,100,101,102,103],$V21=[1,149],$V31=[15,87,90],$V41=[1,170],$V51=[1,163],$V61=[1,168],$V71=[1,167],$V81=[1,171],$V91=[1,166],$Va1=[1,165],$Vb1=[1,164],$Vc1=[1,175],$Vd1=[2,142],$Ve1=[1,180],$Vf1=[1,191],$Vg1=[1,189],$Vh1=[1,190],$Vi1=[2,63],$Vj1=[1,198],$Vk1=[1,199],$Vl1=[1,200],$Vm1=[1,201],$Vn1=[1,202],$Vo1=[1,203],$Vp1=[1,193],$Vq1=[1,194],$Vr1=[1,195],$Vs1=[1,196],$Vt1=[1,197],$Vu1=[11,20,35,37,38],$Vv1=[11,20,31,32,33,34,35,36,37,38,40,41,42,43,44],$Vw1=[1,207],$Vx1=[10,26,39,47,48,49,53,54],$Vy1=[10,26,39,47,48,49],$Vz1=[1,226],$VA1=[11,20,31,32,33,34,35,36,37,38],$VB1=[10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,69,72,74,78,85,87,90,92,94,99,100,101,102,103],$VC1=[1,246],$VD1=[1,247];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"EXP":4,"EOF":5,"IMPORTS":6,"CLASS":7,"IMPORT":8,"tk_IMP":9,"id":10,"punto_coma":11,"tk_CLASS":12,"llave_izq":13,"CUERPO_CLASS":14,"llave_der":15,"FUN_DE":16,"ASIGNACION":17,"MAIN":18,"FIN_FUN":19,"parentesis_der":20,"BFUN":21,"LIST_PARAM":22,"TIPO":23,"tk_coma":24,"tk_VOID":25,"parentesis_izq":26,"LISTA_ID":27,"FIN_DE":28,"tk_igual":29,"EXPRESION":30,"tk_mayor":31,"tk_menor":32,"tk_menorig":33,"tk_mayorig":34,"tk_igualdad":35,"tk_dist":36,"tk_and":37,"tk_or":38,"tk_not":39,"tk_sum":40,"tk_res":41,"tk_mul":42,"tk_div":43,"tk_pot":44,"tk_incr":45,"tk_decr":46,"tk_NULL":47,"cadena":48,"entero":49,"decimal":50,"char":51,"boolean":52,"tk_TRUE":53,"tk_FALSE":54,"CALL_FUNCT":55,"LISTA_EXP":56,"CONDICION":57,"OPERADOR":58,"NUMEROS":59,"OPERADORLOG":60,"TERMINAL":61,"RETURN":62,"tk_RETURN":63,"IF_ELSE":64,"tk_IF":65,"BLOQUE":66,"tk_ELSE":67,"WHILE":68,"tk_WHILE":69,"CICLOS":70,"DO":71,"tk_DO":72,"FOR":73,"tk_FOR":74,"DEC_ASIG":75,"INC_DEC":76,"PRINT":77,"tk_SYSTEM":78,"tk_punto":79,"tk_out":80,"tk_PRINTLN":81,"tk_PRINT":82,"tk_MAIN":83,"SWITCH":84,"tk_SW":85,"CASES":86,"tk_CASE":87,"tk_dpunt":88,"BCASOS":89,"tk_DEFA":90,"BREAK":91,"tk_BRAKE":92,"CONTINUE":93,"tk_CONTINUE":94,"BLOQUEC":95,"BM":96,"SENTENCIAS":97,"SENTENCIA":98,"tk_INT":99,"tk_DOUBLE":100,"tk_BOOL":101,"tk_CHAR":102,"tk_STRING":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_IMP",10:"id",11:"punto_coma",12:"tk_CLASS",13:"llave_izq",15:"llave_der",20:"parentesis_der",24:"tk_coma",25:"tk_VOID",26:"parentesis_izq",29:"tk_igual",31:"tk_mayor",32:"tk_menor",33:"tk_menorig",34:"tk_mayorig",35:"tk_igualdad",36:"tk_dist",37:"tk_and",38:"tk_or",39:"tk_not",40:"tk_sum",41:"tk_res",42:"tk_mul",43:"tk_div",44:"tk_pot",45:"tk_incr",46:"tk_decr",47:"tk_NULL",48:"cadena",49:"entero",50:"decimal",51:"char",52:"boolean",53:"tk_TRUE",54:"tk_FALSE",63:"tk_RETURN",65:"tk_IF",67:"tk_ELSE",69:"tk_WHILE",72:"tk_DO",74:"tk_FOR",78:"tk_SYSTEM",79:"tk_punto",80:"tk_out",81:"tk_PRINTLN",82:"tk_PRINT",83:"tk_MAIN",85:"tk_SW",87:"tk_CASE",88:"tk_dpunt",90:"tk_DEFA",92:"tk_BRAKE",94:"tk_CONTINUE",99:"tk_INT",100:"tk_DOUBLE",101:"tk_BOOL",102:"tk_CHAR",103:"tk_STRING"},
productions_: [0,[3,2],[4,2],[4,2],[4,0],[6,2],[6,1],[8,3],[7,5],[14,2],[14,2],[14,2],[14,0],[19,4],[19,2],[22,4],[22,2],[16,4],[16,4],[16,3],[28,1],[28,3],[27,3],[27,1],[17,4],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,3],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[55,4],[55,3],[56,3],[56,1],[57,3],[57,3],[57,3],[57,1],[57,1],[57,1],[58,1],[58,1],[58,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,1],[59,1],[59,2],[59,1],[59,1],[59,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[62,3],[64,5],[64,6],[64,6],[64,7],[64,2],[68,7],[71,9],[73,10],[75,1],[75,1],[76,2],[76,2],[76,2],[76,2],[77,9],[77,9],[18,7],[84,7],[86,5],[86,3],[91,2],[93,2],[95,3],[96,2],[96,0],[66,2],[97,2],[97,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[98,1],[98,1],[98,2],[98,1],[98,1],[98,1],[89,2],[89,1],[89,1],[89,0],[21,2],[21,1],[21,0],[70,2],[70,1],[70,1],[70,0],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return lista_token; 
break;
case 2: case 5: case 20:
 
break;
case 8:
 lista_token.unshift("class-"+$$[$0-3]); 
break;
case 17:
lista_token.unshift("funcion-"+$$[$0-2]);
break;
case 18:
 lista_token.unshift("funcion-"+$$[$0-2]); 
break;
case 19:
 tipo_var = $$[$0-2]; lista_token.unshift(tipo_var+"-"+list_var); list_var=""; 
break;
case 22:
 list_var+="."+$$[$0-2]; 
break;
case 23:
 list_var+= $$[$0]; 
break;
case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 41: case 42: case 43: case 56: case 57: case 61: case 62: case 74: case 75: case 76: case 77: case 78: case 143: case 144: case 145: case 146: case 147:
   
break;
case 108:
lista_token.unshift("funcion-main");
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:$V1,12:$V2},{1:[3]},{5:[1,8]},{4:9,5:$V0,6:3,7:4,8:5,9:$V1,12:$V2},{4:10,5:$V0,6:3,7:4,8:5,9:$V1,12:$V2},o([5,12],[2,6],{8:5,6:11,9:$V1}),{10:[1,12]},{10:[1,13]},{1:[2,1]},{5:[2,2]},{5:[2,3]},o($V3,[2,5]),{13:[1,14]},{11:[1,15]},{10:$V4,14:16,15:$V5,16:17,17:18,18:19,23:21,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($V3,[2,7]),{15:[1,28]},{10:$V4,14:29,15:$V5,16:17,17:18,18:19,23:21,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V4,14:30,15:$V5,16:17,17:18,18:19,23:21,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V4,14:31,15:$V5,16:17,17:18,18:19,23:21,25:$V6,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$Vc,83:[1,33]},{10:[1,34],27:35},{29:$Vd},{10:[2,143]},{10:[2,144]},{10:[2,145]},{10:[2,146]},{10:[2,147]},o($V3,[2,8]),{15:[2,9]},{15:[2,10]},{15:[2,11]},{26:[1,37]},{26:[1,38]},o($Ve,$Vf,{24:$Vg,26:[1,39]}),{11:[1,42],28:41,29:[1,43]},{10:$Vh,26:$Vi,30:44,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{19:58,20:$Vt,22:60,23:61,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{20:[1,62]},{19:63,20:$Vt,22:60,23:61,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:[1,65],27:64},o($Vu,[2,19]),o($Vu,[2,20]),{10:$Vh,26:$Vi,30:66,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{11:[1,67],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},{10:$Vh,26:$Vi,30:83,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:84,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:85,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},o($VK,$VL,{26:$VM}),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VK,$VN),o($Vu,[2,17]),{13:[1,87]},{19:88,20:$Vt,22:60,23:61,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:[1,89]},{13:[1,90]},o($Vu,[2,18]),o($Ve,[2,22]),o($Ve,$Vf,{24:$Vg}),{11:[1,91],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},o($Vu,[2,24]),{10:$Vh,26:$Vi,30:92,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:93,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:94,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:95,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:96,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:97,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:98,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:99,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:100,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:101,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:102,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:103,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:104,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},o($VK,[2,39]),o($VK,[2,40]),o($VO,[2,33],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,41],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),{20:[1,105],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},{10:$Vh,20:[1,107],26:$Vi,30:108,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57,56:106},{10:$VP,15:$VQ,16:121,17:119,21:109,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:111,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:122,92:$V_,98:110,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vu,[2,14]),o($V$,[2,16],{24:[1,134]}),{10:$VP,15:$VQ,16:121,17:119,21:135,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:111,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:122,92:$V_,98:110,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vu,[2,21]),o($VO,[2,25],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,26],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,27],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,28],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,29],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,30],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,31],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,32],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,34],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,35],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,36],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,37],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VO,[2,38],{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VK,[2,42]),{20:[1,136]},o($VK,[2,55]),{20:[2,57],24:[1,137],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},{15:[1,138]},{10:$VP,15:$V01,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,89:139,91:141,92:$V_,98:140,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($V11,[2,137]),o($Vu,[2,120]),o($Vu,[2,121]),o($Vu,[2,122]),o($Vu,[2,123]),o($Vu,[2,124]),o([31,32,33,34,35,36,37,38,40,41,42,43,44,45,46],$VN,{11:[1,143]}),o($Vu,[2,126]),o($Vu,[2,127]),{11:[1,144],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},o($Vu,[2,129]),o($V11,[2,130]),{10:$Vh,26:$Vi,30:145,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{26:[1,146]},{13:$V21,65:[1,147],66:148},{13:[1,150]},{26:[1,151]},{26:[1,152]},{79:[1,153]},o([11,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46],$VL,{26:$VM,29:$Vd}),{26:[1,154]},{10:$Vc},{11:[1,155]},{22:156,23:61,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{15:[1,157]},o($VK,[2,54]),{10:$Vh,26:$Vi,30:108,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57,56:158},o($Vu,[2,13]),{15:[2,136]},o($V31,[2,133],{23:21,64:112,71:113,68:114,73:115,77:116,55:117,84:118,17:119,30:120,16:121,98:140,91:141,62:142,89:159,10:$VP,25:$VR,26:$Vi,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,63:$VS,65:$VT,67:$VU,69:$VV,72:$VW,74:$VX,78:$VY,85:$VZ,92:$V_,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb}),o([10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,87,90,92,99,100,101,102,103],[2,134]),o($Vu,[2,131]),o($Vu,[2,125]),o($Vu,[2,128]),{11:[1,160],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:161,59:162},{26:[1,172]},o($Vu,[2,96]),{10:$VP,15:$Vc1,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:122,92:$V_,97:173,98:174,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$VP,15:$Vd1,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,70:176,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:178,92:$V_,93:179,94:$Ve1,98:177,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:181,59:162},{10:$V4,16:184,17:183,23:21,25:$VR,75:182,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{80:[1,185]},{10:$Vh,26:$Vi,30:186,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},o($Vu,[2,112]),o($V$,[2,15]),o([10,15,25,99,100,101,102,103],[2,108]),{20:[2,56]},o($V31,[2,132]),o($Vu,[2,91]),{20:[1,187],35:$Vf1,37:$Vg1,38:$Vh1,58:188},o([11,20,37,38],$Vi1,{60:192,31:$Vj1,32:$Vk1,33:$Vl1,34:$Vm1,35:$Vn1,36:$Vo1,40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:204,59:205},o($Vu1,[2,61]),o($Vu1,[2,62]),o($Vv1,[2,79]),o($Vv1,[2,80]),{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:206},o($Vv1,[2,82]),o($Vv1,[2,83],{26:$VM}),o($Vv1,[2,84]),{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:208,59:162},o($Vu,[2,117]),{10:$VP,15:$Vc1,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:122,92:$V_,97:209,98:174,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vu,[2,119]),{15:[1,210]},{10:$VP,15:$Vd1,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,70:211,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:178,92:$V_,93:179,94:$Ve1,98:177,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o([10,15,25,26,39,41,47,48,49,50,51,52,53,54,63,65,67,69,72,74,78,85,92,94,99,100,101,102,103],[2,140]),{15:[2,141]},{11:[1,212]},{20:[1,213],35:$Vf1,37:$Vg1,38:$Vh1,58:188},{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:214,59:162},o($Vx1,[2,100]),o($Vx1,[2,101]),{79:[1,215]},{20:[1,216],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},{13:$V21,66:217},{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:218,59:162},o($Vx1,[2,64]),o($Vx1,[2,65]),o($Vx1,[2,66]),{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:219},{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:220},{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:221},{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:222},{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:223},{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:224},o($Vy1,[2,67]),o($Vy1,[2,68]),o($Vy1,[2,69]),o($Vy1,[2,70]),o($Vy1,[2,71]),o($Vy1,[2,72]),{20:[1,225],35:$Vf1,37:$Vg1,38:$Vh1,58:188},o([37,38],$Vi1,{60:192,20:$Vz1,31:$Vj1,32:$Vk1,33:$Vl1,34:$Vm1,35:$Vn1,36:$Vo1,40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($VA1,[2,81],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),{10:$V41,26:$Vw1,39:$V61,47:$V71,48:$V81,49:$V91,55:169,59:227},{20:[1,228],35:$Vf1,37:$Vg1,38:$Vh1,58:188},o($Vu,[2,118]),{69:[1,229]},{15:[2,139]},{15:[2,113]},{13:[1,230]},{11:[1,231],35:$Vf1,37:$Vg1,38:$Vh1,58:188},{81:[1,232],82:[1,233]},{13:[1,234]},o($VB1,[2,92],{64:235,65:$VT,67:$VU}),o([11,20],[2,58],{58:188,35:$Vf1,37:$Vg1,38:$Vh1}),o($Vu1,[2,59],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($VA1,[2,74],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($VA1,[2,75],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($VA1,[2,76],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($VA1,[2,77],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($VA1,[2,78],{40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1}),o($Vu1,[2,60]),o($Vv1,[2,73]),{20:$Vz1,40:$Vp1,41:$Vq1,42:$Vr1,43:$Vs1,44:$Vt1},{13:$V21,66:236},{26:[1,237]},{10:$VP,15:$Vd1,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,70:238,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:178,92:$V_,93:179,94:$Ve1,98:177,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:[1,240],45:[1,241],46:[1,242],76:239},{26:[1,243]},{26:[1,244]},{86:245,87:$VC1,90:$VD1},o($Vu,[2,93]),o($VB1,[2,94],{64:248,65:$VT,67:$VU}),{10:$V41,26:$V51,39:$V61,47:$V71,48:$V81,49:$V91,53:$Va1,54:$Vb1,55:169,57:249,59:162},{15:[1,250]},{20:[1,251]},{45:[1,253],46:[1,252]},{10:[1,254]},{10:[1,255]},{10:$Vh,26:$Vi,30:256,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{10:$Vh,26:$Vi,30:257,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{15:[1,258]},{10:$Vh,26:$Vi,30:259,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:57},{88:[1,260]},o($Vu,[2,95]),{20:[1,261],35:$Vf1,37:$Vg1,38:$Vh1,58:188},o($Vu,[2,97]),{13:[1,262]},{20:[2,102]},{20:[2,103]},{20:[2,104]},{20:[2,105]},{20:[1,263],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},{20:[1,264],31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ},o($Vu,[2,109]),{31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,88:[1,265]},{10:$VP,15:$V01,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,89:266,91:141,92:$V_,98:140,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{11:[1,267]},{10:$VP,15:$Vd1,16:121,17:119,23:21,25:$VR,26:$Vi,30:120,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:117,62:142,63:$VS,64:112,65:$VT,67:$VU,68:114,69:$VV,70:268,71:113,72:$VW,73:115,74:$VX,77:116,78:$VY,84:118,85:$VZ,91:178,92:$V_,93:179,94:$Ve1,98:177,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{11:[1,269]},{11:[1,270]},o([87,90],$V01,{23:21,64:112,71:113,68:114,73:115,77:116,55:117,84:118,17:119,30:120,16:121,98:140,91:141,62:142,89:271,10:$VP,25:$VR,26:$Vi,39:$Vj,41:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,63:$VS,65:$VT,67:$VU,69:$VV,72:$VW,74:$VX,78:$VY,85:$VZ,92:$V_,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb}),{15:[2,111]},o($Vu,[2,98]),{15:[1,272]},o($Vu,[2,106]),o($Vu,[2,107]),{86:273,87:$VC1,90:$VD1},o($Vu,[2,99]),{15:[2,110]}],
defaultActions: {8:[2,1],9:[2,2],10:[2,3],23:[2,143],24:[2,144],25:[2,145],26:[2,146],27:[2,147],29:[2,9],30:[2,10],31:[2,11],139:[2,136],158:[2,56],179:[2,141],211:[2,139],212:[2,113],252:[2,102],253:[2,103],254:[2,104],255:[2,105],266:[2,111],273:[2,110]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    lista_token = [];
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //let CErrores=require('../JavaAST/Errores');
    var lista_token = [];
    var list_var = "";
    var tipo_var = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:  return 48; 
break;
case 4:return 45
break;
case 5:return 46
break;
case 6:return 35
break;
case 7:return 36
break;
case 8:return 34
break;
case 9:return 33 
break;
case 10:return 31
break;
case 11:return 32
break;
case 12:return 42
break;
case 13:return 43
break;
case 14:return 41
break;
case 15:return 40
break;
case 16:return 26
break;
case 17:return 20
break;
case 18:return 13
break;
case 19:return 15
break;
case 20:return 37
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 11
break;
case 24:return 24
break;
case 25:return 88
break;
case 26:return 29
break;
case 27:return 44
break;
case 28:return 'tk_mod' 
break;
case 29:return 79
break;
case 30:return 99
break;
case 31:return 100
break;
case 32:return 103
break;
case 33:return 102
break;
case 34:return 101
break;
case 35:return 53
break;
case 36:return 54
break;
case 37:return 69
break;
case 38:return 65
break;
case 39:return 67
break;
case 40:return 74
break;
case 41:return 25
break;
case 42:return 87
break;
case 43:return 85
break;
case 44:return 90
break;
case 45:return 92
break;
case 46:return 72
break;
case 47:return 9
break;
case 48:return 63
break;
case 49:return 83
break;
case 50:return 78
break;
case 51:return 80
break;
case 52:return 81
break;
case 53:return 82
break;
case 54:return 47
break;
case 55:return 12
break;
case 56:return 94
break;
case 57: /*se ignoran*/ 
break;
case 58:  return 50;  
break;
case 59:  return 49;  
break;
case 60:  return 10 ;   
break;
case 61:  return 51;   
break;
case 62: /*se ignoran*/ 
break;
case 63:  return 5;  
break;
case 64:console.log("Error lexico:",yy_.yytext,"Linea:",yy_.yylineno);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:"[^\"]*")/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:import\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:null\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:[\t\r\n\f])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[A-Za-z"_"]+["_"0-9A-Za-z]*)/,/^(?:[\'][^\'\n][\'])/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}