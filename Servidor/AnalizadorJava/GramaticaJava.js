/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,7],$V2=[1,6],$V3=[5,9,90],$V4=[1,20],$V5=[2,97],$V6=[1,21],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[10,59,76,99,100,101,102,103],$Vd=[1,33],$Ve=[10,27,59,76,99,100,101,102,103],$Vf=[1,44],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,56],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[2,25],$VF=[1,77],$VG=[11,13,14,15,16,17,18,20,21,22,23,24,25,26,27,39,40,83],$VH=[2,33],$VI=[1,103],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,100],$VN=[2,127],$VO=[1,99],$VP=[1,101],$VQ=[1,95],$VR=[1,102],$VS=[1,104],$VT=[11,13,14,15,16,17,18,20,21,22,23,27,39,40,83],$VU=[2,124],$VV=[1,128],$VW=[10,19,21,27,28,29,30,31,32,33,34,52,54,56,59,61,63,66,70,80,82,85,87,89],$VX=[1,135],$VY=[11,13,14,15,16,17,18,27,39,40,83],$VZ=[11,17,18,27,39,40,83],$V_=[11,13,14,15,16,17,18,20,21,27,39,40,83],$V$=[11,13,14,15,16,17,18,20,21,22,23,24,25,26,27,39,40,45,46,83],$V01=[59,82,85],$V11=[1,157],$V21=[1,155],$V31=[1,153],$V41=[1,152],$V51=[1,151],$V61=[1,154],$V71=[1,161],$V81=[2,131],$V91=[1,166],$Va1=[1,177],$Vb1=[1,178],$Vc1=[11,39,45,46],$Vd1=[1,180],$Ve1=[1,181],$Vf1=[1,182],$Vg1=[1,183],$Vh1=[1,184],$Vi1=[11,13,14,15,16,17,18,20,21,22,23,24,39,45,46],$Vj1=[10,19,29,33,34,47],$Vk1=[10,19,29,47],$Vl1=[11,13,14,15,16,17,18,20,21,22,23,39,45,46],$Vm1=[10,19,21,27,28,29,30,31,32,33,34,56,59,61,63,66,70,80,82,85,87,89],$Vn1=[11,13,14,15,16,17,18,20,21,39,45,46],$Vo1=[1,227],$Vp1=[1,228];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"EXP":4,"EOF":5,"IMPORTS":6,"CLASS":7,"IMPORT":8,"tk_IMP":9,"id":10,"punto_coma":11,"EXPRESION":12,"tk_mayor":13,"tk_menor":14,"tk_menorig":15,"tk_mayorig":16,"tk_igualdad":17,"tk_dist":18,"tk_not":19,"tk_sum":20,"tk_res":21,"tk_mul":22,"tk_div":23,"tk_pot":24,"tk_incr":25,"tk_decr":26,"parentesis_izq":27,"cadena":28,"entero":29,"decimal":30,"char":31,"boolean":32,"tk_TRUE":33,"tk_FALSE":34,"CALL_FUNCT":35,"ASIGNACION":36,"tk_igual":37,"LISTA_EXP":38,"parentesis_der":39,"tk_coma":40,"CONDICION":41,"OPERADOR":42,"NUMEROS":43,"OPERADORLOG":44,"tk_and":45,"tk_or":46,"tk_NULL":47,"TERMINAL":48,"RETURN":49,"tk_RETURN":50,"IF_ELSE":51,"tk_IF":52,"BLOQUE":53,"tk_ELSE":54,"WHILE":55,"tk_WHILE":56,"llave_izq":57,"CICLOS":58,"llave_der":59,"DO":60,"tk_DO":61,"FOR":62,"tk_FOR":63,"DEC_ASIG":64,"INC_DEC":65,"DECLARACION":66,"LIST_PARAM":67,"TIPO":68,"PRINT":69,"tk_SYSTEM":70,"tk_punto":71,"tk_out":72,"tk_PRINTLN":73,"tk_PRINT":74,"MAIN":75,"tk_VOID":76,"tk_MAIN":77,"BFUN":78,"SWITCH":79,"tk_SW":80,"CASES":81,"tk_CASE":82,"tk_dpunt":83,"BCASOS":84,"tk_DEFA":85,"BREAK":86,"tk_BRAKE":87,"CONTINUE":88,"tk_CONTINUE":89,"tk_CLASS":90,"CUERPO_CLASS":91,"FUNCIONES":92,"VD_TP":93,"LISTA_ID":94,"BLOQUEC":95,"BM":96,"SENTENCIAS":97,"SENTENCIA":98,"tk_INT":99,"tk_DOUBLE":100,"tk_BOOL":101,"tk_CHAR":102,"tk_STRING":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_IMP",10:"id",11:"punto_coma",13:"tk_mayor",14:"tk_menor",15:"tk_menorig",16:"tk_mayorig",17:"tk_igualdad",18:"tk_dist",19:"tk_not",20:"tk_sum",21:"tk_res",22:"tk_mul",23:"tk_div",24:"tk_pot",25:"tk_incr",26:"tk_decr",27:"parentesis_izq",28:"cadena",29:"entero",30:"decimal",31:"char",32:"boolean",33:"tk_TRUE",34:"tk_FALSE",37:"tk_igual",39:"parentesis_der",40:"tk_coma",45:"tk_and",46:"tk_or",47:"tk_NULL",50:"tk_RETURN",52:"tk_IF",54:"tk_ELSE",56:"tk_WHILE",57:"llave_izq",59:"llave_der",61:"tk_DO",63:"tk_FOR",66:"DECLARACION",70:"tk_SYSTEM",71:"tk_punto",72:"tk_out",73:"tk_PRINTLN",74:"tk_PRINT",76:"tk_VOID",77:"tk_MAIN",80:"tk_SW",82:"tk_CASE",83:"tk_dpunt",85:"tk_DEFA",87:"tk_BRAKE",89:"tk_CONTINUE",90:"tk_CLASS",99:"tk_INT",100:"tk_DOUBLE",101:"tk_BOOL",102:"tk_CHAR",103:"tk_STRING"},
productions_: [0,[3,2],[4,2],[4,1],[4,0],[6,2],[6,1],[8,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,2],[12,3],[12,3],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[36,4],[35,4],[35,3],[38,3],[38,1],[41,3],[41,3],[41,1],[41,1],[41,1],[42,1],[42,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1],[43,1],[43,2],[43,1],[43,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[49,3],[51,5],[51,6],[51,6],[51,7],[51,2],[55,7],[60,9],[62,10],[64,1],[64,1],[65,2],[65,2],[65,2],[65,2],[67,4],[67,2],[69,9],[69,9],[75,7],[79,7],[81,5],[81,3],[86,2],[88,2],[7,5],[91,2],[91,2],[91,2],[91,0],[92,7],[92,6],[92,1],[93,1],[93,3],[93,5],[93,2],[95,3],[96,2],[96,0],[53,2],[97,2],[97,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[98,1],[98,1],[98,2],[98,1],[84,2],[84,1],[84,1],[84,0],[78,2],[78,1],[78,0],[58,2],[58,1],[58,1],[58,0],[94,3],[68,1],[68,1],[68,1],[68,1],[68,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return "Todo bien"; 
break;
case 2: case 5:
 
break;
case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 22: case 23: case 24: case 34: case 37: case 38: case 41: case 42: case 52: case 53: case 54: case 55: case 56: case 132: case 133: case 134: case 135: case 136: case 137:
   
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:$V1,90:$V2},{1:[3]},{5:[1,8]},{4:9,5:$V0,6:3,7:4,8:5,9:$V1,90:$V2},{5:[2,3]},o([5,90],[2,6],{8:5,6:10,9:$V1}),{10:[1,11]},{10:[1,12]},{1:[2,1]},{5:[2,2]},o($V3,[2,5]),{57:[1,13]},{11:[1,14]},{10:$V4,36:17,59:$V5,68:22,75:18,76:$V6,91:15,92:16,93:19,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($V3,[2,7]),{59:[1,28]},{10:$V4,36:17,59:$V5,68:22,75:18,76:$V6,91:29,92:16,93:19,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V4,36:17,59:$V5,68:22,75:18,76:$V6,91:30,92:16,93:19,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$V4,36:17,59:$V5,68:22,75:18,76:$V6,91:31,92:16,93:19,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($Vc,[2,100],{27:[1,32]}),{37:$Vd},o($Ve,[2,101],{77:[1,34]}),{10:[1,36],94:35},{10:[2,133]},{10:[2,134]},{10:[2,135]},{10:[2,136]},{10:[2,137]},{5:[2,93]},{59:[2,94]},{59:[2,95]},{59:[2,96]},{39:[1,38],67:37,68:39,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},{10:$Vf,12:40,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{27:[1,53]},{11:[1,54],37:[1,55]},o($Ve,[2,104],{40:$Vq}),{39:[1,57]},{57:[1,58]},{10:[1,59]},{11:[1,60],13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD},{10:$Vf,12:74,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:75,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:76,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},o([11,13,14,15,16,17,18,20,21,22,23,24,25,26,39,40,83],$VE,{27:$VF}),o($VG,[2,26]),o($VG,[2,27]),o($VG,[2,28]),o($VG,[2,29]),o($VG,[2,30]),o($VG,[2,31]),o($VG,[2,32]),o($VG,$VH),{39:[1,78]},o($Ve,[2,102]),{10:$Vf,12:79,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:[1,81],94:80},{57:[1,82]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,49:85,50:$VJ,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$VN,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,78:83,79:92,80:$VS,98:84},{39:[2,84],40:[1,105]},o([10,19,21,27,28,29,30,31,32,33,34,47,52,54,56,59,61,63,66,70,76,80,82,85,87,89,99,100,101,102,103],[2,34]),{10:$Vf,12:106,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:107,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:108,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:109,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:110,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:111,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:112,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:113,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:114,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:115,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:116,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},o($VG,[2,20]),o($VG,[2,21]),o($VT,[2,14],{24:$VB,25:$VC,26:$VD}),o($VT,[2,22],{24:$VB,25:$VC,26:$VD}),{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,27:[1,117]},{10:$Vf,12:120,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52,38:118,39:[1,119]},{57:[1,121]},{11:[1,122],13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD},o([11,37],[2,132]),{40:$Vq},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,49:85,50:$VJ,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$VN,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,78:123,79:92,80:$VS,98:84},{59:[1,124]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$VU,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,84:125,86:127,87:$VV,98:126},{59:[2,126]},o($VW,[2,111]),o($VW,[2,112]),o($VW,[2,113]),o($VW,[2,114]),o($VW,[2,115]),o([13,14,15,16,17,18,20,21,22,23,24,25,26],$VH,{11:[1,129]}),o($VW,[2,117]),o($VW,[2,118]),{11:[1,130],13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD},o($VW,[2,120]),{10:$Vf,12:131,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{27:[1,132]},{52:[1,133],53:134,57:$VX},{57:[1,136]},{27:[1,137]},{27:[1,138]},{71:[1,139]},o([11,13,14,15,16,17,18,20,21,22,23,24,25,26],$VE,{27:$VF,37:$Vd}),{27:[1,140]},{67:141,68:39,99:$V7,100:$V8,101:$V9,102:$Va,103:$Vb},o($VY,[2,8],{20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VY,[2,9],{20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VY,[2,10],{20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VY,[2,11],{20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VZ,[2,12],{13:$Vr,14:$Vs,15:$Vt,16:$Vu,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VZ,[2,13],{13:$Vr,14:$Vs,15:$Vt,16:$Vu,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($V_,[2,15],{22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($V_,[2,16],{22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VT,[2,17],{24:$VB,25:$VC,26:$VD}),o($VT,[2,18],{24:$VB,25:$VC,26:$VD}),o([11,27,39,40,83],[2,19],{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD}),o($VG,[2,23]),{39:[1,142]},o($V$,[2,36]),{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,39:[2,38],40:[1,143]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,49:85,50:$VJ,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$VN,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,78:144,79:92,80:$VS,98:84},o($Ve,[2,103]),{59:[1,145]},o($Vc,[2,99]),{59:[2,125]},o($V01,[2,122],{51:86,60:87,55:88,62:89,69:90,35:91,79:92,36:93,12:94,98:126,86:127,84:146,10:$VI,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,52:$VK,54:$VL,56:$VM,61:$VO,63:$VP,66:$VQ,70:$VR,80:$VS,87:$VV}),o($V01,[2,123]),{11:[1,147]},o($VW,[2,116]),o($VW,[2,119]),{11:[1,148],13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD},{10:$V11,19:$V21,29:$V31,33:$V41,34:$V51,35:156,41:149,43:150,47:$V61},{27:[1,158]},o($VW,[2,73]),{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$V71,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,97:159,98:160},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,58:162,59:$V81,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,86:164,87:$VV,88:165,89:$V91,98:163},{10:$V11,19:$V21,29:$V31,33:$V41,34:$V51,35:156,41:167,43:150,47:$V61},{10:$V4,36:169,64:168,66:[1,170]},{72:[1,171]},{10:$Vf,12:172,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{39:[2,83]},o($V$,[2,35]),{10:$Vf,12:120,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52,38:173},{59:[1,174]},o($Vc,[2,98]),o($V01,[2,121]),o($V01,[2,91]),{59:[2,68]},{39:[1,175],42:176,45:$Va1,46:$Vb1},o($Vc1,[2,43],{44:179,13:[1,185],14:[1,186],15:[1,187],16:[1,188],17:[1,189],18:[1,190],20:$Vd1,21:$Ve1,22:$Vf1,23:$Vg1,24:$Vh1}),o($Vc1,[2,41]),o($Vc1,[2,42]),o($Vi1,[2,57]),o($Vi1,[2,58]),{10:$V11,19:$V21,29:$V31,35:156,43:191,47:$V61},o($Vi1,[2,60]),o($Vi1,[2,61],{27:$VF}),{10:$V11,19:$V21,29:$V31,33:$V41,34:$V51,35:156,41:192,43:150,47:$V61},o($VW,[2,108]),{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$V71,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,97:193,98:160},o($VW,[2,110]),{59:[1,194]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,58:195,59:$V81,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,86:164,87:$VV,88:165,89:$V91,98:163},{59:[2,129]},{59:[2,130]},{11:[1,196]},{39:[1,197],42:176,45:$Va1,46:$Vb1},{10:$V11,19:$V21,29:$V31,33:$V41,34:$V51,35:156,41:198,43:150,47:$V61},o($Vj1,[2,77]),o($Vj1,[2,78]),{71:[1,199]},{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,39:[1,200]},{39:[2,37]},o($Vc,[2,87]),{53:201,57:$VX},{10:$V11,19:$V21,29:$V31,33:$V41,34:$V51,35:156,41:202,43:150,47:$V61},o($Vj1,[2,44]),o($Vj1,[2,45]),{10:$V11,19:$V21,29:$V31,35:156,43:203,47:$V61},{10:$V11,19:$V21,29:$V31,35:156,43:204,47:$V61},{10:$V11,19:$V21,29:$V31,35:156,43:205,47:$V61},{10:$V11,19:$V21,29:$V31,35:156,43:206,47:$V61},{10:$V11,19:$V21,29:$V31,35:156,43:207,47:$V61},{10:$V11,19:$V21,29:$V31,35:156,43:208,47:$V61},o($Vk1,[2,46]),o($Vk1,[2,47]),o($Vk1,[2,48]),o($Vk1,[2,49]),o($Vk1,[2,50]),o($Vk1,[2,51]),o($Vl1,[2,59],{24:$Vh1}),{39:[1,209],42:176,45:$Va1,46:$Vb1},o($VW,[2,109]),{56:[1,210]},{59:[2,128]},{59:[2,92]},{57:[1,211]},{11:[1,212],42:176,45:$Va1,46:$Vb1},{73:[1,213],74:[1,214]},{57:[1,215]},o($Vm1,[2,69],{51:216,52:$VK,54:$VL}),o([11,39],[2,39],{42:176,45:$Va1,46:$Vb1}),o($Vc1,[2,40],{20:$Vd1,21:$Ve1,22:$Vf1,23:$Vg1,24:$Vh1}),o($Vn1,[2,52],{22:$Vf1,23:$Vg1,24:$Vh1}),o($Vn1,[2,53],{22:$Vf1,23:$Vg1,24:$Vh1}),o($Vl1,[2,54],{24:$Vh1}),o($Vl1,[2,55],{24:$Vh1}),o([11,13,14,15,16,17,18,39,45,46],[2,56],{20:$Vd1,21:$Ve1,22:$Vf1,23:$Vg1,24:$Vh1}),{53:217,57:$VX},{27:[1,218]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,58:219,59:$V81,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,86:164,87:$VV,88:165,89:$V91,98:163},{10:[1,221],25:[1,222],26:[1,223],65:220},{27:[1,224]},{27:[1,225]},{81:226,82:$Vo1,85:$Vp1},o($VW,[2,70]),o($Vm1,[2,71],{51:229,52:$VK,54:$VL}),{10:$V11,19:$V21,29:$V31,33:$V41,34:$V51,35:156,41:230,43:150,47:$V61},{59:[1,231]},{39:[1,232]},{25:[1,234],26:[1,233]},{10:[1,235]},{10:[1,236]},{10:$Vf,12:237,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{10:$Vf,12:238,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{59:[1,239]},{10:$Vf,12:240,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:52},{83:[1,241]},o($VW,[2,72]),{39:[1,242],42:176,45:$Va1,46:$Vb1},o($VW,[2,74]),{57:[1,243]},{39:[2,79]},{39:[2,80]},{39:[2,81]},{39:[2,82]},{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,39:[1,244]},{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,39:[1,245]},o($VW,[2,88]),{13:$Vr,14:$Vs,15:$Vt,16:$Vu,17:$Vv,18:$Vw,20:$Vx,21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:$VD,83:[1,246]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,59:$VU,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,84:247,86:127,87:$VV,98:126},{11:[1,248]},{10:$VI,12:94,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:91,36:93,51:86,52:$VK,54:$VL,55:88,56:$VM,58:249,59:$V81,60:87,61:$VO,62:89,63:$VP,66:$VQ,69:90,70:$VR,79:92,80:$VS,86:164,87:$VV,88:165,89:$V91,98:163},{11:[1,250]},{11:[1,251]},o([82,85],$VU,{51:86,60:87,55:88,62:89,69:90,35:91,79:92,36:93,12:94,98:126,86:127,84:252,10:$VI,19:$Vg,21:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,52:$VK,54:$VL,56:$VM,61:$VO,63:$VP,66:$VQ,70:$VR,80:$VS,87:$VV}),{59:[2,90]},o($VW,[2,75]),{59:[1,253]},o($VW,[2,85]),o($VW,[2,86]),{81:254,82:$Vo1,85:$Vp1},o($VW,[2,76]),{59:[2,89]}],
defaultActions: {4:[2,3],8:[2,1],9:[2,2],23:[2,133],24:[2,134],25:[2,135],26:[2,136],27:[2,137],28:[2,93],29:[2,94],30:[2,95],31:[2,96],85:[2,126],125:[2,125],141:[2,83],148:[2,68],164:[2,129],165:[2,130],173:[2,37],195:[2,128],196:[2,92],233:[2,79],234:[2,80],235:[2,81],236:[2,82],247:[2,90],254:[2,89]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:  return 28; 
break;
case 4:return 25
break;
case 5:return 26
break;
case 6:return 17
break;
case 7:return 18
break;
case 8:return 16
break;
case 9:return 15 
break;
case 10:return 13
break;
case 11:return 14
break;
case 12:return 22
break;
case 13:return 23
break;
case 14:return 21
break;
case 15:return 20
break;
case 16:return 27
break;
case 17:return 39
break;
case 18:return 57
break;
case 19:return 59
break;
case 20:return 45
break;
case 21:return 46
break;
case 22:return 19
break;
case 23:return 11
break;
case 24:return 40
break;
case 25:return 83
break;
case 26:return 37
break;
case 27:return 24
break;
case 28:return 'tk_mod' 
break;
case 29:return 71
break;
case 30:return 99
break;
case 31:return 100
break;
case 32:return 103
break;
case 33:return 102
break;
case 34:return 101
break;
case 35:return 33
break;
case 36:return 34
break;
case 37:return 56
break;
case 38:return 52
break;
case 39:return 54
break;
case 40:return 63
break;
case 41:return 76
break;
case 42:return 82
break;
case 43:return 80
break;
case 44:return 85
break;
case 45:return 87
break;
case 46:return 61
break;
case 47:return 9
break;
case 48:return 50
break;
case 49:return 77
break;
case 50:return 70
break;
case 51:return 72
break;
case 52:return 73
break;
case 53:return 74
break;
case 54:return 47
break;
case 55:return 90
break;
case 56:return 89
break;
case 57: /*se ignoran*/ 
break;
case 58:  return 30;  
break;
case 59:  return 29;  
break;
case 60:  return 10 ;   
break;
case 61:  return 31;   
break;
case 62: /*se ignoran*/ 
break;
case 63:  return 5;   
break;
case 64:console.log("Error lexico:",yy_.yytext,"Linea:",yy_.yylineno);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:"[^\"]*")/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:import\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:null\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:[\t\r\n\f])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[A-Za-z"_"]+["_"0-9A-Za-z]*)/,/^(?:[\'][^\'\n][\'])/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}